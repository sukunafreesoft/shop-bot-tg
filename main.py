import json
import logging
import os
from datetime import datetime
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.context import FSMContext
from aiogram import Client
from aiogram import types

API_TOKEN = '7118250572:AAFXeQZSewrBqvlsnmiCViWGjhiI8HlLmI0'  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π

logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Bot –∏ Dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
with open('products.json', 'r') as f:
    products = json.load(f)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
if os.path.exists("users.json"):
    with open("users.json", "r") as f:
        users = json.load(f)
else:
    users = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = str(message.from_user.id)
    ref_code = message.get_args()
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = message.from_user
    user_data = {
        "id": user.id,
        "first_name": user.first_name,
        "last_name": user.last_name,
        "username": user.username,
        "language_code": user.language_code,
        "referral_code": ref_code if ref_code != user_id else None,
        "joined_at": now,
        "invited_by": ref_code if ref_code != user_id else None,
        "device_info": message.from_user.device if hasattr(message.from_user, 'device') else 'Unknown',  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
    }

    if user_id not in users:
        users[user_id] = user_data
        if ref_code and ref_code != user_id:
            if ref_code in users:
                users[ref_code]["invited_count"] += 1
        with open("users.json", "w") as f:
            json.dump(users, f, indent=2)

    text = f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!"
    if ref_code:
        text += f"\n–¢—ã –∑–∞—à—ë–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ: {ref_code}"

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üì¶ –ö–∞—Ç–∞–ª–æ–≥"))
    keyboard.add(types.KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"))
    text += "\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º."
    await message.answer(text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö–∞—Ç–∞–ª–æ–≥"
@dp.message_handler(lambda message: message.text == "üì¶ –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for product in products:
        button = types.InlineKeyboardButton(
            text=product['name'],
            callback_data=f"product_{product['id']}"
        )
        keyboard.add(button)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
@dp.callback_query_handler(lambda c: c.data.startswith("product_"))
async def show_product(call: types.CallbackQuery):
    product_id = int(call.data.split("_")[1])
    product = next((p for p in products if p['id'] == product_id), None)
    if not product:
        await call.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å", url=product['url']))
    if product.get("image"):
        await call.message.answer_photo(
            product["image"],
            caption=product["description"],
            reply_markup=keyboard
        )
    else:
        await call.message.answer(
            product["description"],
            reply_markup=keyboard
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å"
@dp.message_handler(lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: types.Message):
    user = message.from_user
    user_id = str(user.id)

    user_data = users.get(user_id, {})
    invited_by = user_data.get("invited_by")
    joined_at = user_data.get("joined_at", "‚Äî")
    invited_count = user_data.get("invited_count", 0)

    # –ü–æ–ª—É—á–∞–µ–º —é–∑–µ—Ä–Ω–µ–π–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    invited_by_username = None
    if invited_by and invited_by in users:
        invited_by_user = await bot.get_chat(invited_by)
        invited_by_username = invited_by_user.username

    # –ï—Å–ª–∏ —É –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ID
    invited_by_display = invited_by_username if invited_by_username else (invited_by or '‚Äî')

    text = (
        "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–±–µ:</b>\n\n"
        f"‚Ä¢ <b>ID:</b> <code>{user.id}</code>\n"
        f"‚Ä¢ <b>–ò–º—è:</b> {user.first_name or '‚Äî'}\n"
        f"‚Ä¢ <b>–§–∞–º–∏–ª–∏—è:</b> {user.last_name or '‚Äî'}\n"
        f"‚Ä¢ <b>–Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{user.username or '‚Äî'}\n"
        f"‚Ä¢ <b>–Ø–∑—ã–∫ Telegram:</b> {user.language_code or '‚Äî'}\n"
        f"‚Ä¢ <b>–ö–æ–≥–¥–∞ –ø—Ä–∏—à—ë–ª:</b> {joined_at}\n"
        f"‚Ä¢ <b>–ö—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª:</b> <code>{invited_by_display}</code>\n"
        f"‚Ä¢ <b>–°–∫–æ–ª—å–∫–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª:</b> {invited_count}"
    )

    keyboard = types.InlineKeyboardMarkup()
    ref_link = f"https://t.me/{(await bot.get_me()).username}?start={user.id}"
    invite_button = types.InlineKeyboardButton("–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", callback_data=f"send_ref_link_{user.id}")
    keyboard.add(invite_button)

    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
@dp.callback_query_handler(lambda c: c.data.startswith("send_ref_link_"))
async def send_ref_link(call: types.CallbackQuery):
    user_id = call.data.split("_")[-1]
    ref_link = f"https://t.me/{(await bot.get_me()).username}?start={user_id}"
    await call.message.answer(f"–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}")

# –ö–æ–º–∞–Ω–¥–∞ /get_ref_link
@dp.message_handler(commands=['get_ref_link'])
async def get_ref_link(message: types.Message):
    user_id = message.from_user.id
    ref_link = f"https://t.me/{(await bot.get_me()).username}?start={user_id}"
    await message.answer(f"–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
